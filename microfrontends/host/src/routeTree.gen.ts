/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchLayoutImport } from './routes/_searchLayout'
import { Route as SearchLayoutIndexImport } from './routes/_searchLayout/index'
import { Route as SearchLayoutListingImport } from './routes/_searchLayout/listing'

// Create/Update Routes

const SearchLayoutRoute = SearchLayoutImport.update({
  id: '/_searchLayout',
  getParentRoute: () => rootRoute,
} as any)

const SearchLayoutIndexRoute = SearchLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SearchLayoutRoute,
} as any)

const SearchLayoutListingRoute = SearchLayoutListingImport.update({
  id: '/listing',
  path: '/listing',
  getParentRoute: () => SearchLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_searchLayout': {
      id: '/_searchLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SearchLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_searchLayout/listing': {
      id: '/_searchLayout/listing'
      path: '/listing'
      fullPath: '/listing'
      preLoaderRoute: typeof SearchLayoutListingImport
      parentRoute: typeof SearchLayoutImport
    }
    '/_searchLayout/': {
      id: '/_searchLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof SearchLayoutIndexImport
      parentRoute: typeof SearchLayoutImport
    }
  }
}

// Create and export the route tree

interface SearchLayoutRouteChildren {
  SearchLayoutListingRoute: typeof SearchLayoutListingRoute
  SearchLayoutIndexRoute: typeof SearchLayoutIndexRoute
}

const SearchLayoutRouteChildren: SearchLayoutRouteChildren = {
  SearchLayoutListingRoute: SearchLayoutListingRoute,
  SearchLayoutIndexRoute: SearchLayoutIndexRoute,
}

const SearchLayoutRouteWithChildren = SearchLayoutRoute._addFileChildren(
  SearchLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof SearchLayoutRouteWithChildren
  '/listing': typeof SearchLayoutListingRoute
  '/': typeof SearchLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/listing': typeof SearchLayoutListingRoute
  '/': typeof SearchLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_searchLayout': typeof SearchLayoutRouteWithChildren
  '/_searchLayout/listing': typeof SearchLayoutListingRoute
  '/_searchLayout/': typeof SearchLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/listing' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/listing' | '/'
  id:
    | '__root__'
    | '/_searchLayout'
    | '/_searchLayout/listing'
    | '/_searchLayout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SearchLayoutRoute: typeof SearchLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  SearchLayoutRoute: SearchLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_searchLayout"
      ]
    },
    "/_searchLayout": {
      "filePath": "_searchLayout.tsx",
      "children": [
        "/_searchLayout/listing",
        "/_searchLayout/"
      ]
    },
    "/_searchLayout/listing": {
      "filePath": "_searchLayout/listing.tsx",
      "parent": "/_searchLayout"
    },
    "/_searchLayout/": {
      "filePath": "_searchLayout/index.tsx",
      "parent": "/_searchLayout"
    }
  }
}
ROUTE_MANIFEST_END */
